generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamento com os participantes (Attendee)
  attendees Attendee[] 

  // Relacionamento opcional para eventos criados pelo usuário
  createdEvents Event[] @relation("UserCreatedEvents")

  @@map("users")
}

model Event {
  id               String  @id @default(uuid())
  title            String
  details          String?
  slug             String  @unique
  maximumAttendees Int?    @map("maximum_attendees")

  // Relacionamento com participantes
  attendees Attendee[]

  // Relacionamento opcional com o criador do evento (usuário)
  createdBy   User?    @relation("UserCreatedEvents", fields: [createdById], references: [id])
  createdById Int?     // Chave estrangeira para o User

  @@map("events")
}

model Attendee {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  eventId   String   @map("event_id")
  userId    Int?     // Chave estrangeira para o User

  // Relacionamento com o evento
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Relacionamento com o usuário
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relacionamento com o check-in
  checkIn   CheckIn?

  @@unique([eventId, email])
  @@map("attendees")
}

model CheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamento com o participante (attendee)
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId Int      @unique @map("attendee_id")

  @@map("check_ins")
}